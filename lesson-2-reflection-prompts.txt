What happens when you initialize a repository? Why do you need to do it?
	Git makes it a git directory by generating .git folder underneath it to track changes/histories. Run command `git init` under a directory to initialise a respository. 

How is the staging area different from the working directory and the repository?
What value do you think it offers?
	The staging area enables changes made in the working directory to be staged before being committed to the repository (and finalised). It essentially	acts as a buffer between the two end worlds and therefore more flexibility and control follow. As a result, we are better off organising commits in more logical ways. 

How can you use the staging area to make sure you have one commit per logical
change?
	To have one commit per logical change, we stage all the files involved into the staing area before committing. This way no other logical changes are committed by accident. 

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
	New releases, features, and hot fixes deserve their own branches/labels, keeping code history organised. Branches create isolated environments where it is safe to conduct the intended work.

How do the diagrams help you visualize the branch structure?

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
